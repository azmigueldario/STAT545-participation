p
p <- gapminder %>%
plot_ly(x = ~gdpPercap,
y = ~lifeExp,
color = ~continent,
# mode specifies the geometric object e.g. "markers" for points, "line" for lines
mode = 'markers',
# type controls the "type" of graph e.g. 'bar', 'scatter'
type = 'scatter'
)
p
# upload our plots to the website
api_create(p, filename = 'Gapminder, GDP and LifeExp')
Sys.setenv("plotly_username"="azmigueldario")
Sys.setenv("plotly_api_key"="k9nbjdfg8gtCg9DWUFt0")
# upload our plots to the website
api_create(p, filename = 'Gapminder, GDP and LifeExp')
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
?ggsave
ggplot(mtcars, aes(hp, wt)) +
geom_point()
p<- ggplot(mtcars, aes(hp, wt)) +
geom_point()
ggsave("13112019_graph", p, path =here::here("Week 7") )
ggsave("13112019_graph", p, device = png(),path =here::here("Week 7") )
ggsave("13112019_graph.png", p, path =here::here("Week 7") )
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2)
p_scales +
scale_x_log10() +
scale_colour_continuous(trans="log10")
p_scales <-
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2)
p_scales +
scale_x_log10() +
scale_colour_continuous(trans="log10")
p_scales
p_scales
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = seq(0,100, by=10)
) +
FILL_IN_SCALE_FUNCTION(breaks=FILL_IN_BREAKS)
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = seq(0,100, by=10)
)
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = seq(0,100, by=10)
) +
scale_y_continuous(breaks=seq(0,100, by=10))
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = seq(0,100, by=10)
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = FILL_IN_BREAKS
) +
FILL_IN_SCALE_FUNCTION(breaks=FILL_IN_BREAKS)
p_scales +
scale_x_log10() +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10)
) +
scale_y_continuous(breaks=seq(0,100, by=10))
p_scales +
scale_x_log10() +
scale_colour_continuous(trans="log10")
p_scales +
scale_x_log10(labels=scales::dollar_format()) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = scales::comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_RCOLORBREWER(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = BuGn
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
p_scales +
scale_x_log10(labels=dollar_format()) +
FILL_IN_WITH_RCOLORBREWER(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = FILL_THIS_IN
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_RCOLORBREWER(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = BuGn
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
RColorBrewer(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = BuGn
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_brewer(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = BuGn
) +
scale_y_continuous(breaks=10*(1:10))
RColorBrewer
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_brewer(
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_brewer(
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_brewer(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_sequential(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
library(scales)
require(RColorBrewer)
p_scales +
scale_x_log10(labels=scales::dollar_format()) +
scale_colour_continuous(
trans  = "log10",
breaks = 10^(1:10),
labels = scales::comma_format()
) +
scale_y_continuous(breaks=10*(1:10))
## All palettes the come with RColorBrewer:
RColorBrewer::display.brewer.all()
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_sequential(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_sequential(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
require(colorspace)
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_sequential(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_sequential(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "BuGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_diverging(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "PRGn"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_diverging(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Purple-Green"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_continuous_diverging(
trans   = "log10",
breaks  = 10^(-10:10),
labels  = comma_format(),
palette = "Purple-Green"
) +
scale_y_continuous(breaks=10*(1:10))
p_scales +
scale_x_log10(labels=dollar_format()) +
scale_colour_viridis_c(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
option = "inferno"
) +
scale_y_continuous(breaks=10*(1:10))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species")
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw()
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = 9,
strip.background = TRUE)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=9),
strip.background = TRUE)
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=9),
strip.background = element_rect(fill = "white"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=11),
strip.background = element_rect(fill = "white"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=5),
strip.background = element_rect(fill = "white"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=12),
strip.background = element_rect(fill = "white"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=12),
strip.background = element_rect(fill = "white", colour = "white"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=12),
strip.background = element_rect(fill = "white", colour = "black"))
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=12),
strip.background = element_rect(fill = "white"))
(p <- gapminder %>%
filter(continent != "Oceania") %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2) +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Greens"
) +
facet_wrap(~ continent) +
scale_y_continuous(breaks=10*(1:10)) +
theme_bw())
ggplot(iris, aes(Sepal.Width, Sepal.Length)) +
facet_wrap(~ Species) +
geom_point() +
labs(x = "Sepal Width",
y = "Sepal Length",
title = "Sepal sizes of three plant species") +
theme_bw() +
theme(axis.title = element_text(size=12),
strip.background = element_rect(fill = "white"))
(p <- gapminder %>%
filter(continent != "Oceania") %>%
ggplot(aes(gdpPercap, lifeExp)) +
geom_point(aes(colour=pop), alpha=0.2) +
scale_x_log10(labels=dollar_format()) +
scale_colour_distiller(
trans   = "log10",
breaks  = 10^(1:10),
labels  = comma_format(),
palette = "Greens"
) +
facet_wrap(~ continent) +
scale_y_continuous(breaks=10*(1:10)) +
theme_bw())
ggplotly(p)
p %>%
ggplotly() %>%
htmlwidgets::saveWidget(here::here("Week 7"))
p %>%
ggplotly() %>%
htmlwidgets::saveWidget()
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("p.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("./p.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("./Week 7/p.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("/Week 7/p.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("plotly.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("/Week 7/plotly.html")
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("./Week 7/plotly.html")
setwd(here::here("Week 7"))
getwd()
p %>%
ggplotly() %>%
htmlwidgets::saveWidget("plotly.html")
p %>%
ggplotly() %>%
plotly_json()
install.packages("listviewer")
p %>%
ggplotly() %>%
listviewer::plotly_json()
p %>%
ggplotly() %>%
plotly_json()
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
z = ~population,
type = "scatter3d",
mode = "markers",
opacity = 0.2)
gapminder
plot_ly(gapminder,
x = ~gdpPercap,
y = ~lifeExp,
z = ~pop,
type = "scatter3d",
mode = "markers",
opacity = 0.2)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(tidyverse))
library(gapminder)
library(broom)
library(tidyverse)
ggplot(mtcars, aes(wt, mpg)) +
geom_point() +
labs(x = "Weight (1000's of lbs)")
mtcars?
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
?mtcars
?mtcars
ggplot(mtcars, aes(qsec, drat)) +
geom_point() +
labs(x = "Quarter mile time",
y = "Rear axle ratio")
(gapminder_France <- gapminder %>%
(gapminder_France <- gapminder %>%
filter(country == "France"))
view(gapminder)
str(gapminder)
(my_lm <- lm(lifeExp~year, data = gapminder, method = lm))
(my_lm <- lm(lifeExp~year, data = gapminder, method = "lm"))
(my_lm <- lm(lifeExp~year, data = gapminder))
?I()
?I()
(my_lm <- lm(lifeExp~I(year-1952), data = gapminder))
unclass(my_lm)
unclass(my_lm)
summary(my_lm)
predict(my_lm) %>%
head()
years1 = gapminder %>%
filter(country=="Germany")
predict(my_lm,years1)
years1 =  data.frame(
year=seq(2000:2010))%>% as_tibble()
predict(my_lm,years1)
years1 =  data.frame(
year=seq(2000,2010))%>% as_tibble()
predict(my_lm,years1)
seq(2000:2010)
seq(2000,2010)
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point() +
geom_smooth(method="lm") +
scale_x_log10()
gapminder_Zimbabwe <- gapminder %>%
gapminder_Zimbabwe %>% ggplot(aes(year, lifeExp)) + geom_point()
gapminder_Zimbabwe <- gapminder %>%
filter(country=="Zimbabwe")
gapminder_Zimbabwe
gapminder_Zimbabwe %>% ggplot(aes(year, lifeExp)) + geom_point()
ggplot(gapminder_Zimbabwe, aes(year,lifeExp)) +
geom_point() +
geom_smooth(method = "lm", se = F)
