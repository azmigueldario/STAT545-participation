geom_smooth(se=FALSE)
#6
ggplot(mpg, mapping = aes(displ, hwy)) +
geom_point(size=5, color="white") +
geom_smooth(se=FALSE)
#6
ggplot(mpg, mapping = aes(displ, hwy)) +
geom_point(size=5, color="white") +
geom_point(mapping = aes(color=drv))
#6
ggplot(mpg, mapping = aes(displ, hwy)) +
geom_point(size=4, color="white") +
geom_point(mapping = aes(color=drv))
#6
ggplot(mpg, mapping = aes(displ, hwy)) +
geom_point(size=3, color="white") +
geom_point(mapping = aes(color=drv))
(diamonds)
str(diamonds)
ggplot(data=diamonds)+
geom_bar(mapping = aes(x=cut))
table(diamonds$cut)
?geom_bar
ggplot(data = diamonds) +
stat_count(mapping = aes(x = cut))
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, stat="prop"))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., group=2))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., , group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., , group=2))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., , group=2))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., , group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., , group=11))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., group=12))
ggplot(data = diamonds) +
stat_summary(
mapping = aes(x = cut, y = depth),
fun.ymin = min,
fun.ymax = max,
fun.y = median
)
?stat_summary
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth) )
geom_pointrange()
?geom_pointrange()
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth) , stat = summary)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth) , stat = summary)
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth) , stat = "summary")
ggplot(data = diamonds) +
geom_pointrange(mapping = aes(x = cut, y = depth) , stat = "summary",
fun.ymin = min,
fun.ymax = max,
fun.y = median)
ggplot(data = diamonds) +
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = depth))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y=..prop.., group=1))
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut))
?geom_col
ggplot(data = diamonds) +
geom_col(mapping = aes(x = cut, y = depth))
?stat_smooth
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop..))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = color, y = ..prop.., group=1))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, y= ..count../sum(..count..), fill = color))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity))
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5)
, position = "identity"
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) +
geom_bar(alpha = 1/5, position = "identity")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
ggplot(data = mpg) +
geom_point(mapping = aes(displ, hwy), position = "jitter")
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point()
ggplot(data = mpg) +
geom_point(mapping = aes(displ, hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(displ, hwy), position = "jitter")
?geom_jitter
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(width = 0.3)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(width = 1)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(width = 0.15)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(width = 0.25)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(height = 4)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(height = 14)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +   geom_point() +
geom_jitter(width = 2, height = 0)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_count()
?geom_boxplot()
ggplot(mpg, cty)+
geom_boxplot()
ggplot(mpg, cty)+
geom_boxplot()
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot()
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot(position = "dodge")
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot(position = "identity")
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot(position = "identity", group=1)
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot(alpha=0.1)
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(alpha=0.1)
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(group=1, alpha=0.1)
ggplot(mpg, mapping = aes(drv, hwy))+
geom_boxplot(group=1, alpha=0.1)
ggplot(mpg, mapping = aes(drv, hwy))+
geom_boxplot()
table(mpg$cty)
ggplot(mpg, mapping = aes(cty, hwy))+
geom_boxplot()
ggplot(mpg, mapping = aes(hwy, drv))+
geom_boxplot()
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot()
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot() +
stat_count()
?geom_boxplot()
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(varwidth = T) +
stat_count()
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(varwidth = T)
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(width+0.2)
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(width=0.2)
p <- ggplot(mpg, aes(class, hwy))
p + geom_boxplot()
p + geom_boxplot() + coord_flip()
p + geom_boxplot(notch = TRUE)
p + geom_boxplot(varwidth = TRUE)
p + geom_boxplot()
p + geom_boxplot(varwidth = TRUE)
p + geom_boxplot(fill = "white", colour = "#3366FF")
# By default, outlier points match the colour of the box. Use
# outlier.colour to override
p + geom_boxplot(outlier.colour = "red", outlier.shape = 1)
# Remove outliers when overlaying boxplot with original data points
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2)
# Boxplots are automatically dodged when any aesthetic is a factor
p + geom_boxplot(aes(colour = drv))
# You can also use boxplots with continuous x, as long as you supply
# a grouping variable. cut_width is particularly useful
ggplot(diamonds, aes(carat, price)) +
geom_boxplot()
ggplot(diamonds, aes(carat, price)) +
geom_boxplot(aes(group = cut_width(carat, 0.25)))
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(aes(group=cut_width(hwy, 2)))
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(aes(group=cut_width(hwy, 10)))
ggplot(mpg, mapping = aes(hwy, cty))+
geom_boxplot(aes(group=cut_width(hwy, 5)))
ggplot(mpg, mapping = aes(class, cty))+
geom_boxplot()
ggplot(mpg, mapping = aes(class, hwy))+
geom_boxplot()
ggplot(mpg, mapping = aes(class, hwy))+
geom_boxplot()
p <- ggplot(mpg, mapping = aes(class, hwy))
ggplot(mpg, mapping = aes(class, hwy, drv))+
geom_boxplot()
ggplot(mpg, mapping = aes(class, hwy, color=drv))+
geom_boxplot()
ggplot(mpg, mapping = aes(class, hwy, color=drv))+
geom_boxplot() +
coord_flip
require(tidyverse)
ggplot(mpg, mapping = aes(class, hwy, color=drv))+
geom_boxplot() +
coord_flip
ggplot(mpg, mapping = aes(class, hwy, color=drv))+
geom_boxplot() +
coord_flip()
par(1,2)
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
coord_flip() +
labs(
y = "Highway MPG",
x = "Class",
title = "Highway MPG by car class",
subtitle = "1999-2008",
caption = "Source: http://fueleconomy.gov"
)
# optional, you can add less
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
coord_flip() +
labs(
y = "Highway MPG",
x = "Year",
title = "Highway MPG by car class"
)
# optional, you can add less
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
labs(
y = "Highway MPG",
x = "Year",
title = "Highway MPG by car class"
)
# optional, you can add less
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
labs(
y = "Highway MPG",
x = "Class of car",
title = "Highway MPG by car class"
)
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
coord_flip() +
labs(
y = "Highway MPG",
x = "Class",
title = "Highway MPG by car class",
subtitle = "1999-2008",
caption = "Source: http://fueleconomy.gov"
)
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
coord_flip() +
labs(
y = "Highway MPG",
x = "Class",
title = "Highway MPG by car class",
subtitle = "1999-2008",
caption = "Source: http://fueleconomy.gov"
)
# optional, you can add less
ggplot(mpg, mapping = aes(class, hwy)) +
geom_boxplot() +
labs(
y = "Highway MPG",
x = "Class of car",
title = "Highway MPG by car class"
)
?geom_abline()
p <- ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
?coord_fixed
p <- ggplot(mtcars, aes(mpg, wt)) + geom_point()
p + coord_fixed(ratio = 1)
p + coord_fixed(ratio = 5)
p + coord_fixed(ratio = 1/5)
ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
p <-  ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
p
p + coord_fixed()
p + coord_fixed()
p
p <-  ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) +
geom_point() +
geom_abline()
p
p + coord_fixed()
p
p + coord_fixed()
knitr::opts_chunk$set(echo = TRUE)
required <- c('tidyverse', 'gapminder', 'scales')
install.packages("tsibble")
set.seed(1)
vot <- rnorm(100, 15, 5)
vot <- sort(vot, decreasing = FALSE)
phon <- "t"
stress <- c(rep("stressed", 50), rep("unstressed", 50))
df1 <- data.frame(phon, stress, vot)
vot <- rnorm(100, -60, 15)
vot <- sort(vot, decreasing = FALSE)
phon <- "d"
df2 <- data.frame(phon, stress, vot)
my_df <- rbind(df1, df2)
summary(my_df)
---
par(mfrow = c(1, 2)) # 1 row, 2 cols
plot(as.numeric(my_df$phon), my_df$vot,  axes = F, type = "n",
ylim = c(-100, 30), xlim = c(0.8, 2.20), ylab = "vot",
xlab = "phon", main = "") # base plot, no data
---
par(mfrow = c(1, 2)) # 1 row, 2 cols
---
par(mfrow=c(1, 2))
box() # add box
axis(side = 1, at = (1:2), labels = c("/t/", "/d/")) # add x axis
axis(side = 2,las = 1, at = seq(-100, 30, by = 20)) # add y axis
#legend("top", legend=c("/t/", "/d/"), pch=c("1","2"), col=c("blue","red")) # add legend
points(my_df$phon[my_df$phon == "t"], my_df$vot[my_df$phon == "t"], col = "blue", cex = 2) # add data /t/
axis(side = 2,las = 1, at = seq(-100, 30, by = 20)) # add y axis
---
par(mfrow=(1,2))
---
par(mfrow=c(1,2))
---
par(mfrow=2)
---
par(mfrow=1)
---
?mfrow
---
?mfrow
?mfrow
par(mfrow=c(1, 2))
plot(as.numeric(my_df$phon), my_df$vot,  axes = F, type = "n",
ylim = c(-100, 30), xlim = c(0.8, 2.20), ylab = "vot",
xlab = "phon", main = "") # base plot, no data
box() # add box
axis(side = 1, at = (1:2), labels = c("/t/", "/d/")) # add x axis
axis(side = 2,las = 1, at = seq(-100, 30, by = 20)) # add y axis
#legend("top", legend=c("/t/", "/d/"), pch=c("1","2"), col=c("blue","red")) # add legend
points(my_df$phon[my_df$phon == "t"], my_df$vot[my_df$phon == "t"], col = "blue", cex = 2) # add data /t/
points(my_df$phon[my_df$phon == "d"], my_df$vot[my_df$phon == "d"], col = "red", cex = 2) # add data /d/
plot(vot ~ phon, data = my_df) # add second plot
plot(vot ~ phon * stress, data = my_df) # this isn't ideal
library(lattice)
bwplot(vot ~ phon | stress, data = my_df)
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
y
?gl
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(error = TRUE)
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(alpha = 0.1) +
scale_x_log10("GDP per capita", labels = scales::dollar_format()) +
theme_bw() +
ylab("Life Expectancy")
require(gapminder)
ggplot(gapminder, aes(gdpPercap, lifeExp)) +
geom_point(alpha = 0.1) +
scale_x_log10("GDP per capita", labels = scales::dollar_format()) +
theme_bw() +
ylab("Life Expectancy")
# load your packages here:
library("gapminder")
# load your packages here:
library("gapminder")
library("tidyverse")
gapminder %>%
mutate(cc=paste(country, continent, sep = ", ")) %>% head()
gapminder %>%
mutate(lifeExp=if_else(country=="Canada" & year==1952, 70, lifeExp)) %>%
filter(country=='Canada') %>%
%>% head()
gapminder %>%
mutate(lifeExp=if_else(country=="Canada" & year==1952, 70, lifeExp)) %>%
filter(country=='Canada') %>%
head()
gapminder %>%
mutate(GDP=gdpPercap*pop) %>%
mutate(
gdpBill= round(GDP/(1*10^9), 2)) %>%
head()
gapminder %>%
filter(country  %in% c('Brazil', 'China')) %>%
head()
gapminder %>%
filter(pop>(100*10^6) & continent=="Asia") %>% head()
gapminder %>%
filter(pop>(100*10^6)) %>% head()
minigap<- gapminder %>% select(year,lifeExp, country) %>% head()
gapminder %>% select(year,lifeExp, country) %>% head()
select(gapminder, continent, everything()) %>% head()
# select drops all additional variable, rename keeps them
select(gapminder, cont=continent) %>% head()
rename(gapminder, cont=continent) %>% head()
gapminder %>%
filter(gdpPercap>10000) %>%
select(-gdpPercap)
gapminder %>%
filter(gdpPercap>10000) %>%
select(-gdpPercap) %>%
head()
gapminder %>%
filter(gdpPercap>10000) %>%
select(-gdpPercap)
gapminder %>%
select(1:3)
gapminder %>%
select(1:3) %>%
names()
iris <- as.tibble(iris)
iris <- as_tibble(iris)
str(iris)
?tidyselect::select_helpers
iris %>%
select(starts_with(Petal))
iris %>%
select(starts_with("Petal"))
gapminder %>%
mutate(pop.billions=pop/(1*10^9))
gapminder %>%
mutate(pop.billions=pop/(1*10^7))
gapminder %>%
mutate(pop.billions=pop/(1*10^7))
iris %>%
filter(Sepal.Length >= 4.6 & Petal.Width >= 0.5)
iris
knitr::opts_chunk$set(error = TRUE, warning = FALSE)
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(gapminder))
suppressPackageStartupMessages(library(tsibble))
gapminder %>%
group_by(continent, year)
gapminder %>%
group_by(continent, year) %>%
mutate(min_life = min(lifeExp))
gapminder %>%
group_by(continent, year) %>%
summarize(min_life = min(lifeExp))
gapminder %>%
group_by(continent, year) %>%
summarize(min_life = min(lifeExp),
country=country[lifeExp==min_life]))
gapminder %>%
group_by(continent, year) %>%
summarize(min_life = min(lifeExp),
country=country[lifeExp==min_life])
gapminder %>%
group_by(continent, year) %>%
summarize(min_life = min(lifeExp),
country= country)
+ `Summarize()` is used to get stat functions and return 1 value only
gapminder %>%
group_by(continent, year)
gapminder %>%
group_by(continent, year)
gapminder %>%
group_by(continent, year)
gapminder %>%
group_by(smallLifeExp = lifeExp < 60)
gapminder %>%
summarize(mu    = mean(lifeExp),
sigma = sd(lifeExp))
gapminder %>%
group_by(continent, year) %>%
summarize(mu    = mean(lifeExp),
sigma = sd(lifeExp))
gapminder %>%
group_by(year, continent) %>%    # Different order
summarize(mu    = mean(lifeExp),
sigma = sd(lifeExp))
gapminder %>%
group_by(country) %>%
summarize(n = n())
gapminder %>%
count(country)
gap_inc <- gapminder %>%
arrange(year) %>%
group_by(country) %>%
mutate(gdpPercap_inc = gdpPercap - lag(gdpPercap))
DT::datatable(gap_inc)
